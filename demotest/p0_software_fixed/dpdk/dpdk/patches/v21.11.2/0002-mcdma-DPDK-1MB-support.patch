diff -pNaur dpdk-stable-21.11.2/app/pdump/main.c mcdma-dpdk-stable-21.11.2/app/pdump/main.c
--- dpdk-stable-21.11.2/app/pdump/main.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/app/pdump/main.c	2022-11-01 00:19:22.399626198 +0530
@@ -114,7 +114,7 @@ struct pdump_tuples {
 	char rx_dev[TX_STREAM_SIZE];
 	char tx_dev[TX_STREAM_SIZE];
 	uint32_t ring_size;
-	uint16_t mbuf_data_size;
+	uint32_t mbuf_data_size;
 	uint32_t total_num_mbufs;
 
 	/* params for library API call */
diff -pNaur dpdk-stable-21.11.2/app/test/test_cryptodev.h mcdma-dpdk-stable-21.11.2/app/test/test_cryptodev.h
--- dpdk-stable-21.11.2/app/test/test_cryptodev.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/app/test/test_cryptodev.h	2022-11-01 00:19:22.403626198 +0530
@@ -118,7 +118,7 @@ pktmbuf_write(struct rte_mbuf *mbuf, int
 	struct rte_mbuf *m;
 	char *dst;
 
-	for (m = mbuf; (m != NULL) && (offset > m->data_len); m = m->next)
+	for (m = mbuf; (m != NULL) && ((uint32_t)offset > m->data_len);	m = m->next)
 		offset -= m->data_len;
 
 	l = m->data_len - offset;
@@ -151,7 +151,7 @@ static inline uint8_t *
 pktmbuf_mtod_offset(struct rte_mbuf *mbuf, int offset) {
 	struct rte_mbuf *m;
 
-	for (m = mbuf; (m != NULL) && (offset > m->data_len); m = m->next)
+	for (m = mbuf; (m != NULL) && ((uint32_t)offset > m->data_len);	m = m->next)
 		offset -= m->data_len;
 
 	if (m == NULL) {
@@ -165,7 +165,7 @@ static inline rte_iova_t
 pktmbuf_iova_offset(struct rte_mbuf *mbuf, int offset) {
 	struct rte_mbuf *m;
 
-	for (m = mbuf; (m != NULL) && (offset > m->data_len); m = m->next)
+	for (m = mbuf; (m != NULL) && ((uint32_t)offset > m->data_len);	m = m->next)
 		offset -= m->data_len;
 
 	if (m == NULL) {
diff -pNaur dpdk-stable-21.11.2/app/test/test_mbuf.c mcdma-dpdk-stable-21.11.2/app/test/test_mbuf.c
--- dpdk-stable-21.11.2/app/test/test_mbuf.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/app/test/test_mbuf.c	2022-11-01 00:19:22.403626198 +0530
@@ -2781,7 +2781,7 @@ test_mbuf(void)
 	struct rte_mempool *pktmbuf_pool2 = NULL;
 
 
-	RTE_BUILD_BUG_ON(sizeof(struct rte_mbuf) != RTE_CACHE_LINE_MIN_SIZE * 2);
+	RTE_BUILD_BUG_ON(sizeof(struct rte_mbuf) != RTE_CACHE_LINE_MIN_SIZE * 3);
 
 	/* create pktmbuf pool if it does not exist */
 	pktmbuf_pool = rte_pktmbuf_pool_create("test_pktmbuf_pool",
diff -pNaur dpdk-stable-21.11.2/app/test-eventdev/evt_common.h mcdma-dpdk-stable-21.11.2/app/test-eventdev/evt_common.h
--- dpdk-stable-21.11.2/app/test-eventdev/evt_common.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/app/test-eventdev/evt_common.h	2022-11-01 00:19:22.403626198 +0530
@@ -57,7 +57,7 @@ struct evt_options {
 	uint8_t timdev_use_burst;
 	uint8_t per_port_pool;
 	uint8_t sched_type_list[EVT_MAX_STAGES];
-	uint16_t mbuf_sz;
+	uint32_t mbuf_sz;
 	uint16_t wkr_deq_dep;
 	uint16_t vector_size;
 	uint16_t eth_queues;
diff -pNaur dpdk-stable-21.11.2/app/test-eventdev/evt_options.c mcdma-dpdk-stable-21.11.2/app/test-eventdev/evt_options.c
--- dpdk-stable-21.11.2/app/test-eventdev/evt_options.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/app/test-eventdev/evt_options.c	2022-11-01 00:19:22.403626198 +0530
@@ -246,7 +246,7 @@ evt_parse_mbuf_sz(struct evt_options *op
 {
 	int ret;
 
-	ret = parser_read_uint16(&(opt->mbuf_sz), arg);
+	ret = parser_read_uint32(&(opt->mbuf_sz), arg);
 
 	return ret;
 }
diff -pNaur dpdk-stable-21.11.2/app/test-pmd/config.c mcdma-dpdk-stable-21.11.2/app/test-pmd/config.c
--- dpdk-stable-21.11.2/app/test-pmd/config.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/app/test-pmd/config.c	2022-11-01 00:32:39.955602582 +0530
@@ -695,7 +695,7 @@ port_infos_display(portid_t port_id)
 	int vlan_offload;
 	struct rte_mempool * mp;
 	static const char *info_border = "*********************";
-	uint16_t mtu;
+	uint32_t mtu;
 	char name[RTE_ETH_NAME_MAX_LEN];
 	int ret;
 	char fw_version[ETHDEV_FWVERS_LEN];
@@ -1317,7 +1317,7 @@ eth_dev_validate_mtu(uint16_t port_id, u
 }
 
 void
-port_mtu_set(portid_t port_id, uint16_t mtu)
+port_mtu_set(portid_t port_id, uint32_t mtu)
 {
 	struct rte_port *port = &ports[port_id];
 	int diag;
@@ -4161,7 +4161,7 @@ nb_segs_is_invalid(unsigned int nb_segs)
 void
 set_tx_pkt_segments(unsigned int *seg_lengths, unsigned int nb_segs)
 {
-	uint16_t tx_pkt_len;
+	uint32_t tx_pkt_len;
 	unsigned int i;
 
 	/*
@@ -4198,7 +4198,7 @@ set_tx_pkt_segments(unsigned int *seg_le
 				i, seg_lengths[i], mbuf_data_size[0]);
 			return;
 		}
-		tx_pkt_len = (uint16_t)(tx_pkt_len + seg_lengths[i]);
+		tx_pkt_len = (uint32_t)(tx_pkt_len + seg_lengths[i]);
 	}
 	if (tx_pkt_len < (sizeof(struct rte_ether_hdr) + 20 + 8)) {
 		fprintf(stderr, "total packet length=%u < %d - give up\n",
@@ -4208,7 +4208,7 @@ set_tx_pkt_segments(unsigned int *seg_le
 	}
 
 	for (i = 0; i < nb_segs; i++)
-		tx_pkt_seg_lengths[i] = (uint16_t) seg_lengths[i];
+		tx_pkt_seg_lengths[i] = (uint32_t) seg_lengths[i];
 
 	tx_pkt_length  = tx_pkt_len;
 	tx_pkt_nb_segs = (uint8_t) nb_segs;
diff -pNaur dpdk-stable-21.11.2/app/test-pmd/testpmd.c mcdma-dpdk-stable-21.11.2/app/test-pmd/testpmd.c
--- dpdk-stable-21.11.2/app/test-pmd/testpmd.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/app/test-pmd/testpmd.c	2022-11-01 00:39:26.427590546 +0530
@@ -212,7 +212,7 @@ uint32_t burst_tx_delay_time = BURST_TX_
 uint32_t burst_tx_retry_num = BURST_TX_RETRIES;
 
 uint32_t mbuf_data_size_n = 1; /* Number of specified mbuf sizes. */
-uint16_t mbuf_data_size[MAX_SEGS_BUFFER_SPLIT] = {
+uint32_t mbuf_data_size[MAX_SEGS_BUFFER_SPLIT] = {
 	DEFAULT_MBUF_DATA_SIZE
 }; /**< Mbuf data space size. */
 uint32_t param_total_num_mbufs = 0;  /**< number of mbufs in all pools - if
@@ -248,8 +248,8 @@ uint8_t  rx_pkt_nb_offs; /**< Number of
 /*
  * Configuration of packet segments used by the "txonly" processing engine.
  */
-uint16_t tx_pkt_length = TXONLY_DEF_PACKET_LEN; /**< TXONLY packet length. */
-uint16_t tx_pkt_seg_lengths[RTE_MAX_SEGS_PER_PKT] = {
+uint32_t tx_pkt_length = TXONLY_DEF_PACKET_LEN; /**< TXONLY packet length. */
+uint32_t tx_pkt_seg_lengths[RTE_MAX_SEGS_PER_PKT] = {
 	TXONLY_DEF_PACKET_LEN,
 };
 uint8_t  tx_pkt_nb_segs = 1; /**< Number of segments in TXONLY packets */
@@ -1164,7 +1164,7 @@ setup_extbuf(uint32_t nb_mbufs, uint16_t
  * Configuration initialisation done once at init time.
  */
 static struct rte_mempool *
-mbuf_pool_create(uint16_t mbuf_seg_size, unsigned nb_mbuf,
+mbuf_pool_create(uint32_t mbuf_seg_size, unsigned nb_mbuf,
 		 unsigned int socket_id, uint16_t size_idx)
 {
 	char pool_name[RTE_MEMPOOL_NAMESIZE];
@@ -1665,12 +1665,12 @@ init_config_port_offloads(portid_t pid,
 	if (port->dev_info.rx_desc_lim.nb_mtu_seg_max != UINT16_MAX &&
 	    port->dev_info.rx_desc_lim.nb_mtu_seg_max != 0) {
 		uint32_t eth_overhead = get_eth_overhead(&port->dev_info);
-		uint16_t mtu;
+		uint32_t mtu;
 
 		if (rte_eth_dev_get_mtu(pid, &mtu) == 0) {
-			uint16_t data_size = (mtu + eth_overhead) /
+			uint32_t data_size = (mtu + eth_overhead) /
 				port->dev_info.rx_desc_lim.nb_mtu_seg_max;
-			uint16_t buffer_size = data_size + RTE_PKTMBUF_HEADROOM;
+			uint32_t buffer_size = data_size + RTE_PKTMBUF_HEADROOM;
 
 			if (buffer_size > mbuf_data_size[0]) {
 				mbuf_data_size[0] = buffer_size;
diff -pNaur dpdk-stable-21.11.2/app/test-pmd/testpmd.h mcdma-dpdk-stable-21.11.2/app/test-pmd/testpmd.h
--- dpdk-stable-21.11.2/app/test-pmd/testpmd.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/app/test-pmd/testpmd.h	2022-11-01 00:40:58.963587806 +0530
@@ -499,7 +499,7 @@ extern uint64_t noisy_lkup_num_reads_wri
 extern uint8_t dcb_config;
 
 extern uint32_t mbuf_data_size_n;
-extern uint16_t mbuf_data_size[MAX_SEGS_BUFFER_SPLIT];
+extern uint32_t mbuf_data_size[MAX_SEGS_BUFFER_SPLIT];
 /**< Mbuf data space size. */
 extern uint32_t param_total_num_mbufs;
 
@@ -537,8 +537,8 @@ extern uint8_t  rx_pkt_nb_offs; /**< Num
  * Configuration of packet segments used by the "txonly" processing engine.
  */
 #define TXONLY_DEF_PACKET_LEN 64
-extern uint16_t tx_pkt_length; /**< Length of TXONLY packet */
-extern uint16_t tx_pkt_seg_lengths[RTE_MAX_SEGS_PER_PKT]; /**< Seg. lengths */
+extern uint32_t tx_pkt_length; /**< Length of TXONLY packet */
+extern uint32_t tx_pkt_seg_lengths[RTE_MAX_SEGS_PER_PKT]; /**< Seg. lengths */
 extern uint8_t  tx_pkt_nb_segs; /**< Number of segments in TX packets */
 extern uint32_t tx_pkt_times_intra;
 extern uint32_t tx_pkt_times_inter;
@@ -886,7 +886,7 @@ void update_fwd_ports(portid_t new_pid);
 
 void set_fwd_eth_peer(portid_t port_id, char *peer_addr);
 
-void port_mtu_set(portid_t port_id, uint16_t mtu);
+void port_mtu_set(portid_t port_id, uint32_t mtu);
 void port_reg_bit_display(portid_t port_id, uint32_t reg_off, uint8_t bit_pos);
 void port_reg_bit_set(portid_t port_id, uint32_t reg_off, uint8_t bit_pos,
 		      uint8_t bit_v);
diff -pNaur dpdk-stable-21.11.2/drivers/crypto/dpaa2_sec/dpaa2_sec_dpseci.c mcdma-dpdk-stable-21.11.2/drivers/crypto/dpaa2_sec/dpaa2_sec_dpseci.c
--- dpdk-stable-21.11.2/drivers/crypto/dpaa2_sec/dpaa2_sec_dpseci.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/crypto/dpaa2_sec/dpaa2_sec_dpseci.c	2022-11-01 00:19:22.403626198 +0530
@@ -960,7 +960,7 @@ static inline int build_auth_sg_fd(
 	DPAA2_SET_FLE_ADDR(sge, DPAA2_MBUF_VADDR_TO_IOVA(mbuf));
 	DPAA2_SET_FLE_OFFSET(sge, data_offset + mbuf->data_off);
 
-	if (data_len <= (mbuf->data_len - data_offset)) {
+	if ((uint32_t)data_len <= (mbuf->data_len - (uint32_t)data_offset)) {
 		sge->length = data_len;
 		data_len = 0;
 	} else {
@@ -972,7 +972,7 @@ static inline int build_auth_sg_fd(
 			sge++;
 			DPAA2_SET_FLE_ADDR(sge, DPAA2_MBUF_VADDR_TO_IOVA(mbuf));
 			DPAA2_SET_FLE_OFFSET(sge, mbuf->data_off);
-			if (data_len > mbuf->data_len)
+			if ((uint32_t)data_len > mbuf->data_len)
 				sge->length = mbuf->data_len;
 			else
 				sge->length = data_len;
diff -pNaur dpdk-stable-21.11.2/drivers/crypto/dpaa_sec/dpaa_sec.c mcdma-dpdk-stable-21.11.2/drivers/crypto/dpaa_sec/dpaa_sec.c
--- dpdk-stable-21.11.2/drivers/crypto/dpaa_sec/dpaa_sec.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/crypto/dpaa_sec/dpaa_sec.c	2022-11-01 00:19:22.403626198 +0530
@@ -817,7 +817,7 @@ build_auth_only_sg(struct rte_crypto_op
 	qm_sg_entry_set64(sg, rte_pktmbuf_iova(mbuf));
 	sg->offset = data_offset;
 
-	if (data_len <= (mbuf->data_len - data_offset)) {
+	if ((uint32_t)data_len <= (mbuf->data_len - (uint32_t)data_offset)) {
 		sg->length = data_len;
 	} else {
 		sg->length = mbuf->data_len - data_offset;
diff -pNaur dpdk-stable-21.11.2/drivers/crypto/nitrox/nitrox_sym_reqmgr.c mcdma-dpdk-stable-21.11.2/drivers/crypto/nitrox/nitrox_sym_reqmgr.c
--- dpdk-stable-21.11.2/drivers/crypto/nitrox/nitrox_sym_reqmgr.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/crypto/nitrox/nitrox_sym_reqmgr.c	2022-11-01 00:19:22.403626198 +0530
@@ -293,8 +293,8 @@ create_sglist_from_mbuf(struct nitrox_sg
 	cnt++;
 	datalen -= mlen;
 	for (m = m->next; m && datalen; m = m->next) {
-		mlen = rte_pktmbuf_data_len(m) < datalen ?
-			rte_pktmbuf_data_len(m) : datalen;
+		mlen = (uint32_t)rte_pktmbuf_data_len(m) < (uint32_t)datalen ?
+			(uint32_t)rte_pktmbuf_data_len(m) : (uint32_t)datalen;
 		sglist[cnt].len = mlen;
 		sglist[cnt].iova = rte_pktmbuf_iova(m);
 		sglist[cnt].virt = rte_pktmbuf_mtod(m, uint8_t *);
diff -pNaur dpdk-stable-21.11.2/drivers/mempool/octeontx/octeontx_fpavf.h mcdma-dpdk-stable-21.11.2/drivers/mempool/octeontx/octeontx_fpavf.h
--- dpdk-stable-21.11.2/drivers/mempool/octeontx/octeontx_fpavf.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/mempool/octeontx/octeontx_fpavf.h	2022-11-01 00:19:22.403626198 +0530
@@ -47,7 +47,7 @@
 #define FPA_AURA_SET_SIZE		16
 
 #define FPA_MAX_OBJ_SIZE		(128 * 1024)
-#define OCTEONTX_FPAVF_BUF_OFFSET	128
+#define OCTEONTX_FPAVF_BUF_OFFSET	192
 
 /*
  * In Cavium OCTEON TX SoC, all accesses to the device registers are
diff -pNaur dpdk-stable-21.11.2/drivers/net/af_packet/rte_eth_af_packet.c mcdma-dpdk-stable-21.11.2/drivers/net/af_packet/rte_eth_af_packet.c
--- dpdk-stable-21.11.2/drivers/net/af_packet/rte_eth_af_packet.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/af_packet/rte_eth_af_packet.c	2022-11-01 00:19:22.403626198 +0530
@@ -516,7 +516,7 @@ eth_tx_queue_setup(struct rte_eth_dev *d
 }
 
 static int
-eth_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+eth_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct pmd_internals *internals = dev->data->dev_private;
 	struct ifreq ifr = { .ifr_mtu = mtu };
diff -pNaur dpdk-stable-21.11.2/drivers/net/ark/ark_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/ark/ark_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/ark/ark_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ark/ark_ethdev.c	2022-11-01 00:19:22.403626198 +0530
@@ -48,7 +48,7 @@ static int eth_ark_macaddr_add(struct rt
 			       uint32_t pool);
 static void eth_ark_macaddr_remove(struct rte_eth_dev *dev,
 				   uint32_t index);
-static int  eth_ark_set_mtu(struct rte_eth_dev *dev, uint16_t size);
+static int  eth_ark_set_mtu(struct rte_eth_dev *dev, uint32_t size);
 
 /*
  * The packet generator is a functional block used to generate packet
@@ -871,7 +871,7 @@ eth_ark_set_default_mac_addr(struct rte_
 }
 
 static int
-eth_ark_set_mtu(struct rte_eth_dev *dev, uint16_t  size)
+eth_ark_set_mtu(struct rte_eth_dev *dev, uint32_t  size)
 {
 	struct ark_adapter *ark = dev->data->dev_private;
 
diff -pNaur dpdk-stable-21.11.2/drivers/net/ark/ark_ethdev_rx.c mcdma-dpdk-stable-21.11.2/drivers/net/ark/ark_ethdev_rx.c
--- dpdk-stable-21.11.2/drivers/net/ark/ark_ethdev_rx.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ark/ark_ethdev_rx.c	2022-11-01 00:19:22.403626198 +0530
@@ -345,7 +345,8 @@ eth_ark_rx_jumbo(struct ark_rx_queue *qu
 	/* first buf populated by called */
 	mbuf_prev = mbuf0;
 	segments = 1;
-	data_len = RTE_MIN(meta->pkt_len, RTE_MBUF_DEFAULT_DATAROOM);
+	data_len = RTE_MIN((uint32_t)meta->pkt_len,
+		(uint32_t)RTE_MBUF_DEFAULT_DATAROOM);
 	remaining = meta->pkt_len - data_len;
 	mbuf0->data_len = data_len;
 
diff -pNaur dpdk-stable-21.11.2/drivers/net/ark/ark_udm.c mcdma-dpdk-stable-21.11.2/drivers/net/ark/ark_udm.c
--- dpdk-stable-21.11.2/drivers/net/ark/ark_udm.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ark/ark_udm.c	2022-11-01 03:18:27.747308021 +0530
@@ -7,7 +7,9 @@
 #include "ark_logs.h"
 #include "ark_udm.h"
 
+#if 0
 static_assert(sizeof(struct ark_rx_meta) == 32, "Unexpected struct size ark_rx_meta");
+#endif
 
 int
 ark_udm_verify(struct ark_udm_t *udm)
diff -pNaur dpdk-stable-21.11.2/drivers/net/ark/ark_udm.h mcdma-dpdk-stable-21.11.2/drivers/net/ark/ark_udm.h
--- dpdk-stable-21.11.2/drivers/net/ark/ark_udm.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ark/ark_udm.h	2022-11-01 00:45:33.687579671 +0530
@@ -21,7 +21,7 @@
 struct ark_rx_meta {
 	uint32_t user_meta[5];	/* user defined based on fpga code */
 	uint8_t  reserved[10];
-	uint16_t pkt_len;
+	uint32_t pkt_len;
 } __rte_packed;
 
 /*
diff -pNaur dpdk-stable-21.11.2/drivers/net/atlantic/atl_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/atlantic/atl_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/atlantic/atl_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/atlantic/atl_ethdev.c	2022-11-01 00:19:22.403626198 +0530
@@ -45,7 +45,7 @@ static int atl_fw_version_get(struct rte
 
 static const uint32_t *atl_dev_supported_ptypes_get(struct rte_eth_dev *dev);
 
-static int atl_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int atl_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 
 /* VLAN stuff */
 static int atl_vlan_filter_set(struct rte_eth_dev *dev,
@@ -1618,7 +1618,7 @@ atl_set_default_mac_addr(struct rte_eth_
 }
 
 static int
-atl_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+atl_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct rte_eth_dev_info dev_info;
 	int ret;
diff -pNaur dpdk-stable-21.11.2/drivers/net/bnxt/bnxt_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/bnxt/bnxt_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/bnxt/bnxt_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/bnxt/bnxt_ethdev.c	2022-11-01 00:19:22.407626198 +0530
@@ -3018,7 +3018,7 @@ bnxt_tx_burst_mode_get(struct rte_eth_de
 	return -EINVAL;
 }
 
-int bnxt_mtu_set_op(struct rte_eth_dev *eth_dev, uint16_t new_mtu)
+int bnxt_mtu_set_op(struct rte_eth_dev *eth_dev, uint32_t new_mtu)
 {
 	struct bnxt *bp = eth_dev->data->dev_private;
 	uint32_t rc;
diff -pNaur dpdk-stable-21.11.2/drivers/net/bnxt/bnxt.h mcdma-dpdk-stable-21.11.2/drivers/net/bnxt/bnxt.h
--- dpdk-stable-21.11.2/drivers/net/bnxt/bnxt.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/bnxt/bnxt.h	2022-11-01 00:19:22.403626198 +0530
@@ -973,7 +973,7 @@ struct bnxt_vf_rep_tx_queue {
 #define SFF8636_PAGE2_MASK		0x80
 #define BNXT_MAX_PHY_I2C_RESP_SIZE	64
 
-int bnxt_mtu_set_op(struct rte_eth_dev *eth_dev, uint16_t new_mtu);
+int bnxt_mtu_set_op(struct rte_eth_dev *eth_dev, uint32_t new_mtu);
 int bnxt_link_update(struct rte_eth_dev *eth_dev, int wait_to_complete,
 		     bool exp_link_status);
 int bnxt_rcv_msg_from_vf(struct bnxt *bp, uint16_t vf_id, void *msg);
diff -pNaur dpdk-stable-21.11.2/drivers/net/bonding/rte_eth_bond_pmd.c mcdma-dpdk-stable-21.11.2/drivers/net/bonding/rte_eth_bond_pmd.c
--- dpdk-stable-21.11.2/drivers/net/bonding/rte_eth_bond_pmd.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/bonding/rte_eth_bond_pmd.c	2022-11-01 00:19:22.407626198 +0530
@@ -3175,7 +3175,7 @@ bond_ethdev_rss_hash_conf_get(struct rte
 }
 
 static int
-bond_ethdev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+bond_ethdev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct rte_eth_dev *slave_eth_dev;
 	struct bond_dev_private *internals = dev->data->dev_private;
diff -pNaur dpdk-stable-21.11.2/drivers/net/cnxk/cn10k_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/cnxk/cn10k_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/cnxk/cn10k_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/cnxk/cn10k_ethdev.c	2022-11-02 17:54:56.271192483 +0530
@@ -66,11 +66,11 @@ nix_tx_offload_flags(struct rte_eth_dev
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_off) !=
 			 offsetof(struct rte_mbuf, buf_iova) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-			 offsetof(struct rte_mbuf, buf_iova) + 16);
+			 offsetof(struct rte_mbuf, buf_iova) + 24);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, pkt_len) !=
 			 offsetof(struct rte_mbuf, ol_flags) + 12);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, tx_offload) !=
-			 offsetof(struct rte_mbuf, pool) + 2 * sizeof(void *));
+			 offsetof(struct rte_mbuf, pool) + 8 * sizeof(void *));
 
 	if (conf & RTE_ETH_TX_OFFLOAD_VLAN_INSERT ||
 	    conf & RTE_ETH_TX_OFFLOAD_QINQ_INSERT)
diff -pNaur dpdk-stable-21.11.2/drivers/net/cnxk/cn9k_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/cnxk/cn9k_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/cnxk/cn9k_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/cnxk/cn9k_ethdev.c	2022-11-02 17:56:35.847189534 +0530
@@ -66,11 +66,11 @@ nix_tx_offload_flags(struct rte_eth_dev
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_off) !=
 			 offsetof(struct rte_mbuf, buf_iova) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-			 offsetof(struct rte_mbuf, buf_iova) + 16);
+			 offsetof(struct rte_mbuf, buf_iova) + 24);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, pkt_len) !=
 			 offsetof(struct rte_mbuf, ol_flags) + 12);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, tx_offload) !=
-			 offsetof(struct rte_mbuf, pool) + 2 * sizeof(void *));
+			 offsetof(struct rte_mbuf, pool) + 8 * sizeof(void *));
 
 	if (conf & RTE_ETH_TX_OFFLOAD_VLAN_INSERT ||
 	    conf & RTE_ETH_TX_OFFLOAD_QINQ_INSERT)
diff -pNaur dpdk-stable-21.11.2/drivers/net/cnxk/cnxk_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/cnxk/cnxk_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/cnxk/cnxk_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/cnxk/cnxk_ethdev.c	2022-11-02 18:33:42.619123598 +0530
@@ -362,13 +362,13 @@ cnxk_nix_rxq_mbuf_setup(struct cnxk_eth_
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_off) % 8 != 0);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, refcnt) -
 				 offsetof(struct rte_mbuf, data_off) !=
-			 2);
+			 4);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, nb_segs) -
 				 offsetof(struct rte_mbuf, data_off) !=
-			 4);
+			 6);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, port) -
 				 offsetof(struct rte_mbuf, data_off) !=
-			 6);
+			 8);
 	mb_def.nb_segs = 1;
 	mb_def.data_off = RTE_PKTMBUF_HEADROOM +
 			  (dev->ptp_en * CNXK_NIX_TIMESYNC_RX_OFFSET);
diff -pNaur dpdk-stable-21.11.2/drivers/net/cxgbe/cxgbe_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/cxgbe/cxgbe_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/cxgbe/cxgbe_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/cxgbe/cxgbe_ethdev.c	2022-11-01 00:19:22.407626198 +0530
@@ -299,7 +299,7 @@ int cxgbe_dev_set_link_down(struct rte_e
 	return 0;
 }
 
-int cxgbe_dev_mtu_set(struct rte_eth_dev *eth_dev, uint16_t mtu)
+int cxgbe_dev_mtu_set(struct rte_eth_dev *eth_dev, uint32_t mtu)
 {
 	struct port_info *pi = eth_dev->data->dev_private;
 	struct adapter *adapter = pi->adapter;
diff -pNaur dpdk-stable-21.11.2/drivers/net/cxgbe/cxgbe_pfvf.h mcdma-dpdk-stable-21.11.2/drivers/net/cxgbe/cxgbe_pfvf.h
--- dpdk-stable-21.11.2/drivers/net/cxgbe/cxgbe_pfvf.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/cxgbe/cxgbe_pfvf.h	2022-11-01 00:19:22.407626198 +0530
@@ -41,7 +41,7 @@ int cxgbe_dev_rx_queue_start(struct rte_
 			     uint16_t tx_queue_id);
 int cxgbe_dev_tx_queue_stop(struct rte_eth_dev *eth_dev, uint16_t tx_queue_id);
 int cxgbe_dev_rx_queue_stop(struct rte_eth_dev *eth_dev, uint16_t rx_queue_id);
-int cxgbe_dev_mtu_set(struct rte_eth_dev *eth_dev, uint16_t mtu);
+int cxgbe_dev_mtu_set(struct rte_eth_dev *eth_dev, uint32_t mtu);
 int cxgbe_dev_start(struct rte_eth_dev *eth_dev);
 int cxgbe_dev_link_update(struct rte_eth_dev *eth_dev,
 			  int wait_to_complete);
diff -pNaur dpdk-stable-21.11.2/drivers/net/dpaa/dpaa_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/dpaa/dpaa_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/dpaa/dpaa_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/dpaa/dpaa_ethdev.c	2022-11-01 00:19:22.407626198 +0530
@@ -158,7 +158,7 @@ dpaa_poll_queue_default_config(struct qm
 }
 
 static int
-dpaa_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+dpaa_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	uint32_t frame_size = mtu + RTE_ETHER_HDR_LEN + RTE_ETHER_CRC_LEN
 				+ VLAN_TAG_SIZE;
diff -pNaur dpdk-stable-21.11.2/drivers/net/dpaa2/dpaa2_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/dpaa2/dpaa2_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/dpaa2/dpaa2_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/dpaa2/dpaa2_ethdev.c	2022-11-01 00:19:22.407626198 +0530
@@ -103,7 +103,7 @@ static int dpaa2_dev_link_update(struct
 				 int wait_to_complete);
 static int dpaa2_dev_set_link_up(struct rte_eth_dev *dev);
 static int dpaa2_dev_set_link_down(struct rte_eth_dev *dev);
-static int dpaa2_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int dpaa2_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 
 static int
 dpaa2_vlan_filter_set(struct rte_eth_dev *dev, uint16_t vlan_id, int on)
@@ -1452,7 +1452,7 @@ dpaa2_dev_allmulticast_disable(struct rt
 }
 
 static int
-dpaa2_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+dpaa2_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	int ret;
 	struct dpaa2_dev_priv *priv = dev->data->dev_private;
diff -pNaur dpdk-stable-21.11.2/drivers/net/e1000/em_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/e1000/em_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/e1000/em_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/e1000/em_ethdev.c	2022-11-01 00:19:22.407626198 +0530
@@ -64,7 +64,7 @@ static void em_hw_control_release(struct
 static void em_init_manageability(struct e1000_hw *hw);
 static void em_release_manageability(struct e1000_hw *hw);
 
-static int eth_em_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int eth_em_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 
 static int eth_em_vlan_filter_set(struct rte_eth_dev *dev,
 		uint16_t vlan_id, int on);
@@ -1781,7 +1781,7 @@ eth_em_default_mac_addr_set(struct rte_e
 }
 
 static int
-eth_em_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+eth_em_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct e1000_hw *hw;
 	uint32_t frame_size;
diff -pNaur dpdk-stable-21.11.2/drivers/net/e1000/igb_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/e1000/igb_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/e1000/igb_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/e1000/igb_ethdev.c	2022-11-01 00:19:22.407626198 +0530
@@ -123,7 +123,7 @@ static void igb_hw_control_release(struc
 static void igb_init_manageability(struct e1000_hw *hw);
 static void igb_release_manageability(struct e1000_hw *hw);
 
-static int  eth_igb_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int  eth_igb_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 
 static int eth_igb_vlan_filter_set(struct rte_eth_dev *dev,
 		uint16_t vlan_id, int on);
@@ -4348,7 +4348,7 @@ igb_remove_5tuple_filter_82576(struct rt
 }
 
 static int
-eth_igb_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+eth_igb_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	uint32_t rctl;
 	struct e1000_hw *hw;
diff -pNaur dpdk-stable-21.11.2/drivers/net/ena/ena_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/ena/ena_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/ena/ena_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ena/ena_ethdev.c	2022-11-01 00:19:22.407626198 +0530
@@ -196,7 +196,7 @@ static int ena_add_single_rx_desc(struct
 static int ena_populate_rx_queue(struct ena_ring *rxq, unsigned int count);
 static void ena_init_rings(struct ena_adapter *adapter,
 			   bool disable_meta_caching);
-static int ena_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int ena_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 static int ena_start(struct rte_eth_dev *dev);
 static int ena_stop(struct rte_eth_dev *dev);
 static int ena_close(struct rte_eth_dev *dev);
@@ -876,7 +876,7 @@ static int ena_stats_get(struct rte_eth_
 	return 0;
 }
 
-static int ena_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+static int ena_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct ena_adapter *adapter;
 	struct ena_com_dev *ena_dev;
diff -pNaur dpdk-stable-21.11.2/drivers/net/enetc/enetc_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/enetc/enetc_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/enetc/enetc_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/enetc/enetc_ethdev.c	2022-11-01 00:19:22.407626198 +0530
@@ -658,7 +658,7 @@ enetc_allmulticast_disable(struct rte_et
 }
 
 static int
-enetc_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+enetc_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct enetc_eth_hw *hw =
 		ENETC_DEV_PRIVATE_TO_HW(dev->data->dev_private);
diff -pNaur dpdk-stable-21.11.2/drivers/net/enic/enic_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/enic/enic_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/enic/enic_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/enic/enic_ethdev.c	2022-11-01 00:19:22.407626198 +0530
@@ -751,7 +751,7 @@ static int enicpmd_set_mc_addr_list(stru
 	return 0;
 }
 
-static int enicpmd_mtu_set(struct rte_eth_dev *eth_dev, uint16_t mtu)
+static int enicpmd_mtu_set(struct rte_eth_dev *eth_dev, uint32_t mtu)
 {
 	struct enic *enic = pmd_priv(eth_dev);
 
diff -pNaur dpdk-stable-21.11.2/drivers/net/failsafe/failsafe_ops.c mcdma-dpdk-stable-21.11.2/drivers/net/failsafe/failsafe_ops.c
--- dpdk-stable-21.11.2/drivers/net/failsafe/failsafe_ops.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/failsafe/failsafe_ops.c	2022-11-01 00:19:22.407626198 +0530
@@ -1276,7 +1276,7 @@ unlock:
 }
 
 static int
-fs_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+fs_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct sub_device *sdev;
 	uint8_t i;
diff -pNaur dpdk-stable-21.11.2/drivers/net/fm10k/fm10k_rxtx_vec.c mcdma-dpdk-stable-21.11.2/drivers/net/fm10k/fm10k_rxtx_vec.c
--- dpdk-stable-21.11.2/drivers/net/fm10k/fm10k_rxtx_vec.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/fm10k/fm10k_rxtx_vec.c	2022-11-01 00:19:22.407626198 +0530
@@ -441,9 +441,9 @@ fm10k_recv_raw_pkts_vec(void *rx_queue,
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	/* Cache is empty -> need to scan the buffer rings, but first move
 	 * the next 'n' mbufs into the cache
diff -pNaur dpdk-stable-21.11.2/drivers/net/hinic/hinic_pmd_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/hinic/hinic_pmd_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/hinic/hinic_pmd_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/hinic/hinic_pmd_ethdev.c	2022-11-01 00:19:22.407626198 +0530
@@ -1532,7 +1532,7 @@ static void hinic_deinit_mac_addr(struct
 
 }
 
-static int hinic_dev_set_mtu(struct rte_eth_dev *dev, uint16_t mtu)
+static int hinic_dev_set_mtu(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct hinic_nic_dev *nic_dev = HINIC_ETH_DEV_TO_PRIVATE_NIC_DEV(dev);
 	int ret;
diff -pNaur dpdk-stable-21.11.2/drivers/net/hns3/hns3_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/hns3/hns3_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/hns3/hns3_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/hns3/hns3_ethdev.c	2022-11-01 00:19:22.411626197 +0530
@@ -90,7 +90,7 @@ static const struct rte_eth_fec_capa spe
 
 static enum hns3_reset_level hns3_get_reset_level(struct hns3_adapter *hns,
 						 uint64_t *levels);
-static int hns3_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int hns3_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 static int hns3_vlan_pvid_configure(struct hns3_adapter *hns, uint16_t pvid,
 				    int on);
 static int hns3_update_link_info(struct rte_eth_dev *eth_dev);
@@ -2113,7 +2113,7 @@ rollback:
 }
 
 static int
-hns3_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+hns3_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct hns3_adapter *hns = dev->data->dev_private;
 	uint32_t frame_size = mtu + HNS3_ETH_OVERHEAD;
diff -pNaur dpdk-stable-21.11.2/drivers/net/hns3/hns3_ethdev_vf.c mcdma-dpdk-stable-21.11.2/drivers/net/hns3/hns3_ethdev_vf.c
--- dpdk-stable-21.11.2/drivers/net/hns3/hns3_ethdev_vf.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/hns3/hns3_ethdev_vf.c	2022-11-01 00:19:22.411626197 +0530
@@ -39,7 +39,7 @@ enum hns3vf_evt_cause {
 
 static enum hns3_reset_level hns3vf_get_reset_level(struct hns3_hw *hw,
 						    uint64_t *levels);
-static int hns3vf_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int hns3vf_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 static int hns3vf_dev_configure_vlan(struct rte_eth_dev *dev);
 
 static int hns3vf_add_mc_mac_addr(struct hns3_hw *hw,
@@ -543,7 +543,7 @@ hns3vf_config_mtu(struct hns3_hw *hw, ui
 }
 
 static int
-hns3vf_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+hns3vf_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct hns3_hw *hw = HNS3_DEV_PRIVATE_TO_HW(dev->data->dev_private);
 	uint32_t frame_size = mtu + HNS3_ETH_OVERHEAD;
diff -pNaur dpdk-stable-21.11.2/drivers/net/i40e/i40e_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/i40e/i40e_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/i40e/i40e_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/i40e/i40e_ethdev.c	2022-11-01 00:48:03.531575234 +0530
@@ -385,7 +385,7 @@ static int i40e_get_module_eeprom(struct
 static int i40e_set_default_mac_addr(struct rte_eth_dev *dev,
 				      struct rte_ether_addr *mac_addr);
 
-static int i40e_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int i40e_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 static void i40e_set_mac_max_frame(struct rte_eth_dev *dev, uint16_t size);
 
 static int i40e_ethertype_filter_convert(
@@ -11421,7 +11421,7 @@ static int i40e_set_default_mac_addr(str
 }
 
 static int
-i40e_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu __rte_unused)
+i40e_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu __rte_unused)
 {
 	/* mtu setting is forbidden if port is start */
 	if (dev->data->dev_started != 0) {
diff -pNaur dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_avx2.c mcdma-dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_avx2.c
--- dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_avx2.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_avx2.c	2022-11-01 00:19:22.411626197 +0530
@@ -190,9 +190,9 @@ _recv_raw_pkts_vec_avx2(struct i40e_rx_q
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	/* Status/Error flag masks */
 	/*
@@ -527,7 +527,7 @@ _recv_raw_pkts_vec_avx2(struct i40e_rx_q
 		 */
 		/* check the structure matches expectations */
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-				offsetof(struct rte_mbuf, rearm_data) + 8);
+				offsetof(struct rte_mbuf, rearm_data) + 16);
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 				RTE_ALIGN(offsetof(struct rte_mbuf, rearm_data), 16));
 		/* build up data and do writes */
diff -pNaur dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_avx512.c mcdma-dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_avx512.c
--- dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_avx512.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_avx512.c	2022-11-02 18:09:00.039167498 +0530
@@ -302,9 +302,9 @@ _recv_raw_pkts_vec_avx512(struct i40e_rx
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	/* Status/Error flag masks */
 	/* mask everything except RSS, flow director and VLAN flags
@@ -682,7 +682,7 @@ _recv_raw_pkts_vec_avx512(struct i40e_rx
 		 */
 		/* check the structure matches expectations */
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-				offsetof(struct rte_mbuf, rearm_data) + 8);
+				offsetof(struct rte_mbuf, rearm_data) + 16);
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 				RTE_ALIGN(offsetof(struct rte_mbuf, rearm_data), 16));
 		/* build up data and do writes */
diff -pNaur dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_sse.c mcdma-dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_sse.c
--- dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_sse.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/i40e/i40e_rxtx_vec_sse.c	2022-11-01 00:19:22.411626197 +0530
@@ -317,7 +317,7 @@ desc_to_olflags_v(struct i40e_rx_queue *
 
 	/* write the rearm data and the olflags in one write */
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-			offsetof(struct rte_mbuf, rearm_data) + 8);
+			offsetof(struct rte_mbuf, rearm_data) + 16);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 			RTE_ALIGN(offsetof(struct rte_mbuf, rearm_data), 16));
 	_mm_store_si128((__m128i *)&rx_pkts[0]->rearm_data, rearm0);
@@ -430,9 +430,9 @@ _recv_raw_pkts_vec(struct i40e_rx_queue
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	/* Cache is empty -> need to scan the buffer rings, but first move
 	 * the next 'n' mbufs into the cache
diff -pNaur dpdk-stable-21.11.2/drivers/net/iavf/iavf_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/iavf/iavf_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/iavf/iavf_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/iavf/iavf_ethdev.c	2022-11-01 00:49:29.851572678 +0530
@@ -118,7 +118,7 @@ static int iavf_dev_rss_hash_update(stru
 				   struct rte_eth_rss_conf *rss_conf);
 static int iavf_dev_rss_hash_conf_get(struct rte_eth_dev *dev,
 				     struct rte_eth_rss_conf *rss_conf);
-static int iavf_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int iavf_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 static int iavf_dev_set_default_mac_addr(struct rte_eth_dev *dev,
 					 struct rte_ether_addr *mac_addr);
 static int iavf_dev_rx_queue_intr_enable(struct rte_eth_dev *dev,
@@ -1606,7 +1606,7 @@ iavf_dev_rss_hash_conf_get(struct rte_et
 }
 
 static int
-iavf_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu __rte_unused)
+iavf_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu __rte_unused)
 {
 	/* mtu setting is forbidden if port is start */
 	if (dev->data->dev_started) {
diff -pNaur dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_avx2.c mcdma-dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_avx2.c
--- dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_avx2.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_avx2.c	2022-11-01 00:19:22.411626197 +0530
@@ -107,9 +107,9 @@ _iavf_recv_raw_pkts_vec_avx2(struct iavf
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	/* Status/Error flag masks */
 	/**
@@ -369,7 +369,7 @@ _iavf_recv_raw_pkts_vec_avx2(struct iavf
 		 */
 		/* check the structure matches expectations */
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-				 offsetof(struct rte_mbuf, rearm_data) + 8);
+				 offsetof(struct rte_mbuf, rearm_data) + 16);
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 				 RTE_ALIGN(offsetof(struct rte_mbuf,
 						    rearm_data),
@@ -609,9 +609,9 @@ _iavf_recv_raw_pkts_vec_avx2_flex_rxd(st
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	/* Status/Error flag masks */
 	/**
@@ -1082,7 +1082,7 @@ _iavf_recv_raw_pkts_vec_avx2_flex_rxd(st
 		 */
 		/* check the structure matches expectations */
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-				 offsetof(struct rte_mbuf, rearm_data) + 8);
+				 offsetof(struct rte_mbuf, rearm_data) + 16);
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 				 RTE_ALIGN(offsetof(struct rte_mbuf,
 						    rearm_data),
diff -pNaur dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_avx512.c mcdma-dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_avx512.c
--- dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_avx512.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_avx512.c	2022-11-02 18:13:34.631159367 +0530
@@ -267,9 +267,9 @@ _iavf_recv_raw_pkts_vec_avx512(struct ia
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	uint16_t i, received;
 
@@ -536,7 +536,7 @@ _iavf_recv_raw_pkts_vec_avx512(struct ia
 		 */
 		/* check the structure matches expectations */
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-				 offsetof(struct rte_mbuf, rearm_data) + 8);
+				 offsetof(struct rte_mbuf, rearm_data) + 16);
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 				 RTE_ALIGN(offsetof(struct rte_mbuf,
 						    rearm_data),
@@ -816,9 +816,9 @@ _iavf_recv_raw_pkts_vec_avx512_flex_rxd(
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	uint16_t i, received;
 
@@ -1348,7 +1348,7 @@ _iavf_recv_raw_pkts_vec_avx512_flex_rxd(
 		 */
 		/* check the structure matches expectations */
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-				 offsetof(struct rte_mbuf, rearm_data) + 8);
+				 offsetof(struct rte_mbuf, rearm_data) + 16);
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 				 RTE_ALIGN(offsetof(struct rte_mbuf,
 						    rearm_data),
diff -pNaur dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_sse.c mcdma-dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_sse.c
--- dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_sse.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/iavf/iavf_rxtx_vec_sse.c	2022-11-01 00:19:22.411626197 +0530
@@ -180,7 +180,7 @@ desc_to_olflags_v(struct iavf_rx_queue *
 
 	/* write the rearm data and the olflags in one write */
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-			offsetof(struct rte_mbuf, rearm_data) + 8);
+			offsetof(struct rte_mbuf, rearm_data) + 16);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 			RTE_ALIGN(offsetof(struct rte_mbuf, rearm_data), 16));
 	_mm_store_si128((__m128i *)&rx_pkts[0]->rearm_data, rearm0);
@@ -332,7 +332,7 @@ flex_desc_to_olflags_v(struct iavf_rx_qu
 
 	/* write the rearm data and the olflags in one write */
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-			 offsetof(struct rte_mbuf, rearm_data) + 8);
+			 offsetof(struct rte_mbuf, rearm_data) + 16);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 			 RTE_ALIGN(offsetof(struct rte_mbuf, rearm_data), 16));
 	_mm_store_si128((__m128i *)&rx_pkts[0]->rearm_data, rearm0);
@@ -464,9 +464,9 @@ _recv_raw_pkts_vec(struct iavf_rx_queue
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	/* Cache is empty -> need to scan the buffer rings, but first move
 	 * the next 'n' mbufs into the cache
@@ -727,9 +727,9 @@ _recv_raw_pkts_vec_flex_rxd(struct iavf_
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	/* Cache is empty -> need to scan the buffer rings, but first move
 	 * the next 'n' mbufs into the cache
diff -pNaur dpdk-stable-21.11.2/drivers/net/ice/ice_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/ice/ice_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/ice/ice_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ice/ice_ethdev.c	2022-11-01 00:50:38.651570641 +0530
@@ -102,7 +102,7 @@ static int ice_link_update(struct rte_et
 static int ice_dev_set_link_up(struct rte_eth_dev *dev);
 static int ice_dev_set_link_down(struct rte_eth_dev *dev);
 
-static int ice_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int ice_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 static int ice_vlan_offload_set(struct rte_eth_dev *dev, int mask);
 static int ice_rss_reta_update(struct rte_eth_dev *dev,
 			       struct rte_eth_rss_reta_entry64 *reta_conf,
@@ -3980,7 +3980,7 @@ ice_dev_set_link_down(struct rte_eth_dev
 }
 
 static int
-ice_mtu_set(struct rte_eth_dev *dev, uint16_t mtu __rte_unused)
+ice_mtu_set(struct rte_eth_dev *dev, uint32_t mtu __rte_unused)
 {
 	/* mtu setting is forbidden if port is start */
 	if (dev->data->dev_started != 0) {
diff -pNaur dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_avx2.c mcdma-dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_avx2.c
--- dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_avx2.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_avx2.c	2022-11-01 00:19:22.415626197 +0530
@@ -124,9 +124,9 @@ _ice_recv_raw_pkts_vec_avx2(struct ice_r
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	/* Status/Error flag masks */
 	/**
@@ -572,7 +572,7 @@ _ice_recv_raw_pkts_vec_avx2(struct ice_r
 		 */
 		/* check the structure matches expectations */
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-				 offsetof(struct rte_mbuf, rearm_data) + 8);
+				 offsetof(struct rte_mbuf, rearm_data) + 16);
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 				 RTE_ALIGN(offsetof(struct rte_mbuf,
 						    rearm_data),
diff -pNaur dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_avx512.c mcdma-dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_avx512.c
--- dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_avx512.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_avx512.c	2022-11-02 18:03:42.843176891 +0530
@@ -223,9 +223,9 @@ _ice_recv_raw_pkts_vec_avx512(struct ice
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	/* following code block is for Rx Checksum Offload */
 	/* Status/Error flag masks */
@@ -683,7 +683,7 @@ _ice_recv_raw_pkts_vec_avx512(struct ice
 		 */
 		/* check the structure matches expectations */
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-				 offsetof(struct rte_mbuf, rearm_data) + 8);
+				 offsetof(struct rte_mbuf, rearm_data) + 16);
 		RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 				 RTE_ALIGN(offsetof(struct rte_mbuf,
 						    rearm_data),
diff -pNaur dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_sse.c mcdma-dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_sse.c
--- dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_sse.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ice/ice_rxtx_vec_sse.c	2022-11-01 00:19:22.415626197 +0530
@@ -260,7 +260,7 @@ ice_rx_desc_to_olflags_v(struct ice_rx_q
 
 	/* write the rearm data and the olflags in one write */
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-			 offsetof(struct rte_mbuf, rearm_data) + 8);
+			 offsetof(struct rte_mbuf, rearm_data) + 16);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 			 RTE_ALIGN(offsetof(struct rte_mbuf, rearm_data), 16));
 	_mm_store_si128((__m128i *)&rx_pkts[0]->rearm_data, rearm0);
@@ -384,9 +384,9 @@ _ice_recv_raw_pkts_vec(struct ice_rx_que
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			 offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	/* Cache is empty -> need to scan the buffer rings, but first move
 	 * the next 'n' mbufs into the cache
diff -pNaur dpdk-stable-21.11.2/drivers/net/igc/igc_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/igc/igc_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/igc/igc_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/igc/igc_ethdev.c	2022-11-01 00:19:22.415626197 +0530
@@ -197,7 +197,7 @@ static int eth_igc_set_mc_addr_list(stru
 			 uint32_t nb_mc_addr);
 static int eth_igc_allmulticast_enable(struct rte_eth_dev *dev);
 static int eth_igc_allmulticast_disable(struct rte_eth_dev *dev);
-static int eth_igc_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int eth_igc_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 static int eth_igc_stats_get(struct rte_eth_dev *dev,
 			struct rte_eth_stats *rte_stats);
 static int eth_igc_xstats_get(struct rte_eth_dev *dev,
@@ -1578,7 +1578,7 @@ eth_igc_supported_ptypes_get(__rte_unuse
 }
 
 static int
-eth_igc_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+eth_igc_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct igc_hw *hw = IGC_DEV_PRIVATE_HW(dev);
 	uint32_t frame_size = mtu + IGC_ETH_OVERHEAD;
diff -pNaur dpdk-stable-21.11.2/drivers/net/ionic/ionic_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/ionic/ionic_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/ionic/ionic_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ionic/ionic_ethdev.c	2022-11-01 00:19:22.415626197 +0530
@@ -22,7 +22,7 @@ static int  eth_ionic_dev_uninit(struct
 static int  ionic_dev_info_get(struct rte_eth_dev *eth_dev,
 	struct rte_eth_dev_info *dev_info);
 static int  ionic_dev_configure(struct rte_eth_dev *dev);
-static int  ionic_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int  ionic_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 static int  ionic_dev_start(struct rte_eth_dev *dev);
 static int  ionic_dev_stop(struct rte_eth_dev *dev);
 static int  ionic_dev_close(struct rte_eth_dev *dev);
@@ -340,7 +340,7 @@ ionic_dev_interrupt_handler(void *param)
 }
 
 static int
-ionic_dev_mtu_set(struct rte_eth_dev *eth_dev, uint16_t mtu)
+ionic_dev_mtu_set(struct rte_eth_dev *eth_dev, uint32_t mtu)
 {
 	struct ionic_lif *lif = IONIC_ETH_DEV_TO_LIF(eth_dev);
 	int err;
diff -pNaur dpdk-stable-21.11.2/drivers/net/ixgbe/ixgbe_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/ixgbe/ixgbe_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/ixgbe/ixgbe_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ixgbe/ixgbe_ethdev.c	2022-11-01 00:51:30.891569094 +0530
@@ -194,7 +194,7 @@ static int ixgbe_dev_info_get(struct rte
 static const uint32_t *ixgbe_dev_supported_ptypes_get(struct rte_eth_dev *dev);
 static int ixgbevf_dev_info_get(struct rte_eth_dev *dev,
 				struct rte_eth_dev_info *dev_info);
-static int ixgbe_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int ixgbe_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 
 static int ixgbe_vlan_filter_set(struct rte_eth_dev *dev,
 		uint16_t vlan_id, int on);
@@ -308,7 +308,7 @@ static void ixgbe_remove_5tuple_filter(s
 			struct ixgbe_5tuple_filter *filter);
 static int ixgbe_dev_flow_ops_get(struct rte_eth_dev *dev,
 				  const struct rte_flow_ops **ops);
-static int ixgbevf_dev_set_mtu(struct rte_eth_dev *dev, uint16_t mtu);
+static int ixgbevf_dev_set_mtu(struct rte_eth_dev *dev, uint32_t mtu);
 
 static int ixgbe_dev_set_mc_addr_list(struct rte_eth_dev *dev,
 				      struct rte_ether_addr *mc_addr_set,
@@ -5216,7 +5216,7 @@ is_ixgbe_supported(struct rte_eth_dev *d
 }
 
 static int
-ixgbe_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+ixgbe_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	uint32_t hlreg0;
 	uint32_t maxfrs;
@@ -6390,7 +6390,7 @@ ixgbe_remove_5tuple_filter(struct rte_et
 }
 
 static int
-ixgbevf_dev_set_mtu(struct rte_eth_dev *dev, uint16_t mtu)
+ixgbevf_dev_set_mtu(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct ixgbe_hw *hw;
 	uint32_t max_frame = mtu + IXGBE_ETH_OVERHEAD;
diff -pNaur dpdk-stable-21.11.2/drivers/net/ixgbe/ixgbe_rxtx_vec_sse.c mcdma-dpdk-stable-21.11.2/drivers/net/ixgbe/ixgbe_rxtx_vec_sse.c
--- dpdk-stable-21.11.2/drivers/net/ixgbe/ixgbe_rxtx_vec_sse.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/ixgbe/ixgbe_rxtx_vec_sse.c	2022-11-01 00:19:22.415626197 +0530
@@ -252,7 +252,7 @@ desc_to_olflags_v(__m128i descs[4], __m1
 
 	/* write the rearm data and the olflags in one write */
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-			offsetof(struct rte_mbuf, rearm_data) + 8);
+			offsetof(struct rte_mbuf, rearm_data) + 16);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, rearm_data) !=
 			RTE_ALIGN(offsetof(struct rte_mbuf, rearm_data), 16));
 	_mm_store_si128((__m128i *)&rx_pkts[0]->rearm_data, rearm0);
@@ -427,9 +427,9 @@ _recv_raw_pkts_vec(struct ixgbe_rx_queue
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=
-			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
 			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=
+			offsetof(struct rte_mbuf, rx_descriptor_fields1) + 16);
 
 	mbuf_init = _mm_set_epi64x(0, rxq->mbuf_initializer);
 
diff -pNaur dpdk-stable-21.11.2/drivers/net/liquidio/lio_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/liquidio/lio_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/liquidio/lio_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/liquidio/lio_ethdev.c	2022-11-01 00:19:22.415626197 +0530
@@ -431,7 +431,7 @@ lio_dev_info_get(struct rte_eth_dev *eth
 }
 
 static int
-lio_dev_mtu_set(struct rte_eth_dev *eth_dev, uint16_t mtu)
+lio_dev_mtu_set(struct rte_eth_dev *eth_dev, uint32_t mtu)
 {
 	struct lio_device *lio_dev = LIO_DEV(eth_dev);
 	struct lio_dev_ctrl_cmd ctrl_cmd;
diff -pNaur dpdk-stable-21.11.2/drivers/net/null/rte_eth_null.c mcdma-dpdk-stable-21.11.2/drivers/net/null/rte_eth_null.c
--- dpdk-stable-21.11.2/drivers/net/null/rte_eth_null.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/null/rte_eth_null.c	2022-11-01 00:19:22.415626197 +0530
@@ -273,7 +273,7 @@ eth_tx_queue_setup(struct rte_eth_dev *d
 }
 
 static int
-eth_mtu_set(struct rte_eth_dev *dev __rte_unused, uint16_t mtu __rte_unused)
+eth_mtu_set(struct rte_eth_dev *dev __rte_unused, uint32_t mtu __rte_unused)
 {
 	return 0;
 }
diff -pNaur dpdk-stable-21.11.2/drivers/net/octeontx/octeontx_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/octeontx/octeontx_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/octeontx/octeontx_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/octeontx/octeontx_ethdev.c	2022-11-01 00:19:22.415626197 +0530
@@ -527,7 +527,7 @@ octeontx_dev_close(struct rte_eth_dev *d
 }
 
 static int
-octeontx_dev_mtu_set(struct rte_eth_dev *eth_dev, uint16_t mtu)
+octeontx_dev_mtu_set(struct rte_eth_dev *eth_dev, uint32_t mtu)
 {
 	uint32_t buffsz, frame_size = mtu + OCCTX_L2_OVERHEAD;
 	struct octeontx_nic *nic = octeontx_pmd_priv(eth_dev);
diff -pNaur dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev.c	2022-11-02 17:50:51.311199736 +0530
@@ -537,11 +537,11 @@ otx2_nix_rxq_mbuf_setup(struct otx2_eth_
 
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_off) % 8 != 0);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, refcnt) -
-				offsetof(struct rte_mbuf, data_off) != 2);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, nb_segs) -
 				offsetof(struct rte_mbuf, data_off) != 4);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, port) -
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, nb_segs) -
 				offsetof(struct rte_mbuf, data_off) != 6);
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, port) -
+				offsetof(struct rte_mbuf, data_off) != 8);
 	mb_def.nb_segs = 1;
 	mb_def.data_off = RTE_PKTMBUF_HEADROOM + nix_get_data_off(dev);
 	mb_def.port = port_id;
@@ -762,11 +762,11 @@ nix_tx_offload_flags(struct rte_eth_dev
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_off) !=
 			 offsetof(struct rte_mbuf, buf_iova) + 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, ol_flags) !=
-			 offsetof(struct rte_mbuf, buf_iova) + 16);
+			 offsetof(struct rte_mbuf, buf_iova) + 24);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, pkt_len) !=
 			 offsetof(struct rte_mbuf, ol_flags) + 12);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, tx_offload) !=
-			 offsetof(struct rte_mbuf, pool) + 2 * sizeof(void *));
+			 offsetof(struct rte_mbuf, pool) + 8 * sizeof(void *));
 
 	if (conf & RTE_ETH_TX_OFFLOAD_VLAN_INSERT ||
 	    conf & RTE_ETH_TX_OFFLOAD_QINQ_INSERT)
diff -pNaur dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev.h mcdma-dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev.h
--- dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev.h	2022-11-01 00:19:22.415626197 +0530
@@ -454,7 +454,7 @@ int otx2_nix_set_mc_addr_list(struct rte
 			      uint32_t nb_mc_addr);
 
 /* MTU */
-int otx2_nix_mtu_set(struct rte_eth_dev *eth_dev, uint16_t mtu);
+int otx2_nix_mtu_set(struct rte_eth_dev *eth_dev, uint32_t mtu);
 int otx2_nix_recalc_mtu(struct rte_eth_dev *eth_dev);
 void otx2_nix_enable_mseg_on_jumbo(struct otx2_eth_rxq *rxq);
 
diff -pNaur dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev_ops.c mcdma-dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev_ops.c
--- dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev_ops.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/octeontx2/otx2_ethdev_ops.c	2022-11-01 00:19:22.415626197 +0530
@@ -8,7 +8,7 @@
 #include "otx2_ethdev.h"
 
 int
-otx2_nix_mtu_set(struct rte_eth_dev *eth_dev, uint16_t mtu)
+otx2_nix_mtu_set(struct rte_eth_dev *eth_dev, uint32_t mtu)
 {
 	uint32_t buffsz, frame_size = mtu + NIX_L2_OVERHEAD;
 	struct otx2_eth_dev *dev = otx2_eth_pmd_priv(eth_dev);
diff -pNaur dpdk-stable-21.11.2/drivers/net/qede/qede_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/qede/qede_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/qede/qede_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/qede/qede_ethdev.c	2022-11-01 00:19:22.415626197 +0530
@@ -2303,7 +2303,7 @@ static int qede_rss_reta_query(struct rt
 
 
 
-static int qede_set_mtu(struct rte_eth_dev *dev, uint16_t mtu)
+static int qede_set_mtu(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct qede_dev *qdev = QEDE_INIT_QDEV(dev);
 	struct ecore_dev *edev = QEDE_INIT_EDEV(qdev);
diff -pNaur dpdk-stable-21.11.2/drivers/net/sfc/sfc_ef100_tx.c mcdma-dpdk-stable-21.11.2/drivers/net/sfc/sfc_ef100_tx.c
--- dpdk-stable-21.11.2/drivers/net/sfc/sfc_ef100_tx.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/sfc/sfc_ef100_tx.c	2022-11-02 18:20:11.463147617 +0530
@@ -545,7 +545,7 @@ sfc_ef100_tx_pkt_descs_max(const struct
 
 /** Maximum length of an mbuf segment data */
 #define SFC_MBUF_SEG_LEN_MAX		UINT16_MAX
-	RTE_BUILD_BUG_ON(sizeof(m->data_len) != 2);
+	RTE_BUILD_BUG_ON(sizeof(m->data_len) != 4);
 
 	if (m->ol_flags & RTE_MBUF_F_TX_TCP_SEG) {
 		/* Tx TSO descriptor */
diff -pNaur dpdk-stable-21.11.2/drivers/net/sfc/sfc_ef10_tx.c mcdma-dpdk-stable-21.11.2/drivers/net/sfc/sfc_ef10_tx.c
--- dpdk-stable-21.11.2/drivers/net/sfc/sfc_ef10_tx.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/sfc/sfc_ef10_tx.c	2022-11-01 00:19:22.415626197 +0530
@@ -263,8 +263,8 @@ sfc_ef10_tx_pkt_descs_max(const struct r
 	 */
 
 /** Maximum length of the mbuf segment data */
-#define SFC_MBUF_SEG_LEN_MAX		UINT16_MAX
-	RTE_BUILD_BUG_ON(sizeof(m->data_len) != 2);
+#define SFC_MBUF_SEG_LEN_MAX		UINT32_MAX
+	RTE_BUILD_BUG_ON(sizeof(m->data_len) != 4);
 
 	/*
 	 * Each segment is already counted once below.  So, calculate
diff -pNaur dpdk-stable-21.11.2/drivers/net/sfc/sfc_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/sfc/sfc_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/sfc/sfc_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/sfc/sfc_ethdev.c	2022-11-01 00:19:22.415626197 +0530
@@ -1095,7 +1095,7 @@ sfc_check_scatter_on_all_rx_queues(struc
 }
 
 static int
-sfc_dev_set_mtu(struct rte_eth_dev *dev, uint16_t mtu)
+sfc_dev_set_mtu(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct sfc_adapter *sa = sfc_adapter_by_eth_dev(dev);
 	size_t pdu = EFX_MAC_PDU(mtu);
diff -pNaur dpdk-stable-21.11.2/drivers/net/tap/rte_eth_tap.c mcdma-dpdk-stable-21.11.2/drivers/net/tap/rte_eth_tap.c
--- dpdk-stable-21.11.2/drivers/net/tap/rte_eth_tap.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/tap/rte_eth_tap.c	2022-11-01 00:19:22.415626197 +0530
@@ -477,7 +477,8 @@ pmd_rx_burst(void *queue, struct rte_mbu
 			(*rxq->iovecs)[mbuf->nb_segs].iov_base =
 				(char *)buf->buf_addr + data_off;
 
-			seg->data_len = RTE_MIN(seg->buf_len - data_off, len);
+			seg->data_len = RTE_MIN((unsigned)seg->buf_len -
+				(unsigned)data_off, (unsigned)len);
 			seg->data_off = data_off;
 
 			len -= seg->data_len;
@@ -1696,7 +1697,7 @@ tap_tx_queue_setup(struct rte_eth_dev *d
 }
 
 static int
-tap_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+tap_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct pmd_internals *pmd = dev->data->dev_private;
 	struct ifreq ifr = { .ifr_mtu = mtu };
diff -pNaur dpdk-stable-21.11.2/drivers/net/tap/rte_eth_tap.h mcdma-dpdk-stable-21.11.2/drivers/net/tap/rte_eth_tap.h
--- dpdk-stable-21.11.2/drivers/net/tap/rte_eth_tap.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/tap/rte_eth_tap.h	2022-11-01 00:19:22.415626197 +0530
@@ -57,7 +57,7 @@ struct rx_queue {
 
 struct tx_queue {
 	int type;                       /* Type field - TUN|TAP */
-	uint16_t *mtu;                  /* Pointer to MTU from dev_data */
+	uint32_t *mtu;                  /* Pointer to MTU from dev_data */
 	uint16_t csum:1;                /* Enable checksum offloading */
 	struct pkt_stats stats;         /* Stats for this TX queue */
 	struct rte_gso_ctx gso_ctx;     /* GSO context */
diff -pNaur dpdk-stable-21.11.2/drivers/net/thunderx/nicvf_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/thunderx/nicvf_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/thunderx/nicvf_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/thunderx/nicvf_ethdev.c	2022-11-01 00:19:22.415626197 +0530
@@ -146,7 +146,7 @@ nicvf_dev_link_update(struct rte_eth_dev
 }
 
 static int
-nicvf_dev_set_mtu(struct rte_eth_dev *dev, uint16_t mtu)
+nicvf_dev_set_mtu(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct nicvf *nic = nicvf_pmd_priv(dev);
 	uint32_t buffsz, frame_size = mtu + NIC_HW_L2_OVERHEAD;
@@ -1228,14 +1228,13 @@ nicvf_rxq_mbuf_setup(struct nicvf_rxq *r
 	RTE_BUILD_BUG_ON(sizeof(union mbuf_initializer) != 8);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_off) % 8 != 0);
 	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, refcnt) -
-				offsetof(struct rte_mbuf, data_off) != 2);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, nb_segs) -
 				offsetof(struct rte_mbuf, data_off) != 4);
-	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, port) -
+	RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, nb_segs) -
 				offsetof(struct rte_mbuf, data_off) != 6);
 	RTE_BUILD_BUG_ON(offsetof(struct nicvf_rxq, rxq_fastpath_data_end) -
 				offsetof(struct nicvf_rxq,
 					rxq_fastpath_data_start) > 128);
+
 	mb_def.nb_segs = 1;
 	mb_def.data_off = RTE_PKTMBUF_HEADROOM + (nic->skip_bytes);
 	mb_def.port = rxq->port_id;
diff -pNaur dpdk-stable-21.11.2/drivers/net/virtio/virtio_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/virtio/virtio_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/virtio/virtio_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/virtio/virtio_ethdev.c	2022-11-01 00:19:22.415626197 +0530
@@ -970,7 +970,7 @@ virtio_check_scatter_on_all_rx_queues(st
 
 #define VLAN_TAG_LEN           4    /* 802.3ac tag (not DMA'd) */
 static int
-virtio_mtu_set(struct rte_eth_dev *dev, uint16_t mtu)
+virtio_mtu_set(struct rte_eth_dev *dev, uint32_t mtu)
 {
 	struct virtio_hw *hw = dev->data->dev_private;
 	uint32_t ether_hdr_len = RTE_ETHER_HDR_LEN + VLAN_TAG_LEN +
diff -pNaur dpdk-stable-21.11.2/drivers/net/virtio/virtio_ethdev.h mcdma-dpdk-stable-21.11.2/drivers/net/virtio/virtio_ethdev.h
--- dpdk-stable-21.11.2/drivers/net/virtio/virtio_ethdev.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/virtio/virtio_ethdev.h	2022-11-01 00:19:22.415626197 +0530
@@ -15,7 +15,7 @@
 #define VIRTIO_MAX_TX_QUEUES 128U
 #define VIRTIO_MAX_MAC_ADDRS 64
 #define VIRTIO_MIN_RX_BUFSIZE 64
-#define VIRTIO_MAX_RX_PKTLEN  9728U
+#define VIRTIO_MAX_RX_PKTLEN    66048U
 
 /* Features desired/implemented by this driver. */
 #define VIRTIO_PMD_DEFAULT_GUEST_FEATURES	\
diff -pNaur dpdk-stable-21.11.2/drivers/net/virtio/virtio_rxtx.c mcdma-dpdk-stable-21.11.2/drivers/net/virtio/virtio_rxtx.c
--- dpdk-stable-21.11.2/drivers/net/virtio/virtio_rxtx.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/virtio/virtio_rxtx.c	2022-11-01 00:54:52.307563130 +0530
@@ -401,8 +401,9 @@ static void
 virtio_tso_fix_cksum(struct rte_mbuf *m)
 {
 	/* common case: header is not fragmented */
-	if (likely(rte_pktmbuf_data_len(m) >= m->l2_len + m->l3_len +
-			m->l4_len)) {
+	if (likely((uint32_t)rte_pktmbuf_data_len(m) >=
+			(uint32_t)(m->l2_len + m->l3_len +
+			m->l4_len))) {
 		struct rte_ipv4_hdr *iph;
 		struct rte_ipv6_hdr *ip6h;
 		struct rte_tcp_hdr *th;
@@ -937,7 +938,8 @@ virtio_rx_offload(struct rte_mbuf *m, st
 			 * In case of SCTP, this will be wrong since it's a CRC
 			 * but there's nothing we can do.
 			 */
-			uint16_t csum = 0, off;
+			uint16_t csum = 0;
+			uint32_t off;
 
 			if (rte_raw_cksum_mbuf(m, hdr->csum_start,
 				rte_pktmbuf_pkt_len(m) - hdr->csum_start,
@@ -945,8 +947,8 @@ virtio_rx_offload(struct rte_mbuf *m, st
 				return -EINVAL;
 			if (likely(csum != 0xffff))
 				csum = ~csum;
-			off = hdr->csum_offset + hdr->csum_start;
-			if (rte_pktmbuf_data_len(m) >= off + 1)
+			off = (uint32_t) (hdr->csum_offset + hdr->csum_start);
+			if ((uint32_t)rte_pktmbuf_data_len(m) >= (uint32_t) (off + 1))
 				*rte_pktmbuf_mtod_offset(m, uint16_t *,
 					off) = csum;
 		}
@@ -1134,7 +1136,7 @@ virtio_recv_pkts_packed(void *rx_queue,
 		rxm->vlan_tci = 0;
 
 		rxm->pkt_len = (uint32_t)(len[i] - hdr_size);
-		rxm->data_len = (uint16_t)(len[i] - hdr_size);
+		rxm->data_len = (uint32_t)(len[i] - hdr_size);
 
 		hdr = (struct virtio_net_hdr *)((char *)rxm->buf_addr +
 			RTE_PKTMBUF_HEADROOM - hdr_size);
diff -pNaur dpdk-stable-21.11.2/drivers/net/vmxnet3/vmxnet3_ethdev.c mcdma-dpdk-stable-21.11.2/drivers/net/vmxnet3/vmxnet3_ethdev.c
--- dpdk-stable-21.11.2/drivers/net/vmxnet3/vmxnet3_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/drivers/net/vmxnet3/vmxnet3_ethdev.c	2022-11-01 00:19:22.415626197 +0530
@@ -87,7 +87,7 @@ static int vmxnet3_dev_info_get(struct r
 				struct rte_eth_dev_info *dev_info);
 static const uint32_t *
 vmxnet3_dev_supported_ptypes_get(struct rte_eth_dev *dev);
-static int vmxnet3_dev_mtu_set(struct rte_eth_dev *dev, uint16_t mtu);
+static int vmxnet3_dev_mtu_set(struct rte_eth_dev *dev, uint32_t mtu);
 static int vmxnet3_dev_vlan_filter_set(struct rte_eth_dev *dev,
 				       uint16_t vid, int on);
 static int vmxnet3_dev_vlan_offload_set(struct rte_eth_dev *dev, int mask);
@@ -1416,7 +1416,7 @@ vmxnet3_dev_supported_ptypes_get(struct
 }
 
 static int
-vmxnet3_dev_mtu_set(struct rte_eth_dev *dev, __rte_unused uint16_t mtu)
+vmxnet3_dev_mtu_set(struct rte_eth_dev *dev, __rte_unused uint32_t mtu)
 {
 	if (dev->data->dev_started) {
 		PMD_DRV_LOG(ERR, "Port %d must be stopped to configure MTU",
diff -pNaur dpdk-stable-21.11.2/lib/ethdev/rte_ethdev.c mcdma-dpdk-stable-21.11.2/lib/ethdev/rte_ethdev.c
--- dpdk-stable-21.11.2/lib/ethdev/rte_ethdev.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/lib/ethdev/rte_ethdev.c	2022-11-01 01:06:11.919543006 +0530
@@ -2117,8 +2117,7 @@ rte_eth_rx_queue_setup(uint16_t port_id, uint16_t rx_queue_id,
 			return -ENOSPC;
 		}
 		mbp_buf_size = rte_pktmbuf_data_room_size(mp);
-		if (mbp_buf_size < dev_info.min_rx_bufsize +
-				   RTE_PKTMBUF_HEADROOM) {
+		if ((mbp_buf_size - RTE_PKTMBUF_HEADROOM) < dev_info.min_rx_bufsize) {
 			RTE_ETHDEV_LOG(ERR,
-				       "%s mbuf_data_room_size %u < %u (RTE_PKTMBUF_HEADROOM=%u + min_rx_bufsize(dev)=%u)\n",
+				       "%s (mbuf_data_room_size %u - %u RTE_PKTMBUF_HEADROOM=%u) < min_rx_bufsize(dev)=%u)\n",
 				       mp->name, mbp_buf_size,
@@ -3489,7 +3489,7 @@ rte_eth_dev_info_get(uint16_t port_id, s
 	dev_info->device = dev->device;
 	dev_info->min_mtu = RTE_ETHER_MIN_LEN - RTE_ETHER_HDR_LEN -
 		RTE_ETHER_CRC_LEN;
-	dev_info->max_mtu = UINT16_MAX;
+	dev_info->max_mtu = UINT32_MAX;
 
 	RTE_FUNC_PTR_OR_ERR_RET(*dev->dev_ops->dev_infos_get, -ENOTSUP);
 	diag = (*dev->dev_ops->dev_infos_get)(dev, dev_info);
@@ -3704,7 +3704,7 @@ rte_eth_macaddr_get(uint16_t port_id, st
 }
 
 int
-rte_eth_dev_get_mtu(uint16_t port_id, uint16_t *mtu)
+rte_eth_dev_get_mtu(uint16_t port_id, uint32_t *mtu)
 {
 	struct rte_eth_dev *dev;
 
@@ -3722,7 +3722,7 @@ rte_eth_dev_get_mtu(uint16_t port_id, ui
 }
 
 int
-rte_eth_dev_set_mtu(uint16_t port_id, uint16_t mtu)
+rte_eth_dev_set_mtu(uint16_t port_id, uint32_t mtu)
 {
 	int ret;
 	struct rte_eth_dev_info dev_info;
diff -pNaur dpdk-stable-21.11.2/lib/ethdev/rte_ethdev.h mcdma-dpdk-stable-21.11.2/lib/ethdev/rte_ethdev.h
--- dpdk-stable-21.11.2/lib/ethdev/rte_ethdev.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/lib/ethdev/rte_ethdev.h	2022-11-01 00:19:22.415626197 +0530
@@ -1791,8 +1791,8 @@ struct rte_eth_dev_info {
 	const char *driver_name; /**< Device Driver name. */
 	unsigned int if_index; /**< Index to bound host interface, or 0 if none.
 		Use if_indextoname() to translate into an interface name. */
-	uint16_t min_mtu;	/**< Minimum MTU allowed */
-	uint16_t max_mtu;	/**< Maximum MTU allowed */
+	uint32_t min_mtu;	/**< Minimum MTU allowed */
+	uint32_t max_mtu;	/**< Maximum MTU allowed */
 	const uint32_t *dev_flags; /**< Device flags */
 	uint32_t min_rx_bufsize; /**< Minimum size of Rx buffer. */
 	uint32_t max_rx_pktlen; /**< Maximum configurable length of Rx pkt. */
@@ -3466,7 +3466,7 @@ int rte_eth_dev_set_ptypes(uint16_t port
  *   - (-ENODEV) if *port_id* invalid.
  *   - (-EINVAL) if bad parameter.
  */
-int rte_eth_dev_get_mtu(uint16_t port_id, uint16_t *mtu);
+int rte_eth_dev_get_mtu(uint16_t port_id, uint32_t *mtu);
 
 /**
  * Change the MTU of an Ethernet device.
@@ -3485,7 +3485,7 @@ int rte_eth_dev_get_mtu(uint16_t port_id
  *     when the mtu is set using dev->dev_ops->mtu_set.
  *   - (-EBUSY) if operation is not allowed when the port is running
  */
-int rte_eth_dev_set_mtu(uint16_t port_id, uint16_t mtu);
+int rte_eth_dev_set_mtu(uint16_t port_id, uint32_t mtu);
 
 /**
  * Enable/Disable hardware filtering by an Ethernet device of received
diff -pNaur dpdk-stable-21.11.2/lib/kni/rte_kni_common.h mcdma-dpdk-stable-21.11.2/lib/kni/rte_kni_common.h
--- dpdk-stable-21.11.2/lib/kni/rte_kni_common.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/lib/kni/rte_kni_common.h	2022-11-01 02:09:39.339430266 +0530
@@ -81,7 +81,7 @@ struct rte_kni_fifo {
 struct rte_kni_mbuf {
 	void *buf_addr __attribute__((__aligned__(RTE_CACHE_LINE_SIZE)));
 	uint64_t buf_iova;
-	uint16_t data_off;      /**< Start address of data in segment buffer. */
+	uint32_t data_off;      /**< Start address of data in segment buffer. */
 	char pad1[2];
 	uint16_t nb_segs;       /**< Number of segments. */
 	char pad4[2];
@@ -90,6 +90,7 @@ struct rte_kni_mbuf {
 	uint32_t pkt_len;       /**< Total pkt len: sum of all segment data_len. */
 	uint16_t data_len;      /**< Amount of data in segment buffer. */
 	char pad3[14];
+	char pad5[4];
 	void *pool;
 
 	/* fields on second cache line */
diff -pNaur dpdk-stable-21.11.2/lib/mbuf/rte_mbuf.c mcdma-dpdk-stable-21.11.2/lib/mbuf/rte_mbuf.c
--- dpdk-stable-21.11.2/lib/mbuf/rte_mbuf.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/lib/mbuf/rte_mbuf.c	2022-11-01 00:19:22.415626197 +0530
@@ -41,7 +41,7 @@ rte_pktmbuf_pool_init(struct rte_mempool
 {
 	struct rte_pktmbuf_pool_private *user_mbp_priv, *mbp_priv;
 	struct rte_pktmbuf_pool_private default_mbp_priv;
-	uint16_t roomsz;
+	uint32_t roomsz;
 
 	RTE_ASSERT(mp->private_data_size >=
 		   sizeof(struct rte_pktmbuf_pool_private));
@@ -94,17 +94,18 @@ rte_pktmbuf_init(struct rte_mempool *mp,
 
 	RTE_ASSERT(RTE_ALIGN(priv_size, RTE_MBUF_PRIV_ALIGN) == priv_size);
 	RTE_ASSERT(mp->elt_size >= mbuf_size);
-	RTE_ASSERT(buf_len <= UINT16_MAX);
+	RTE_ASSERT(buf_len <= UINT32_MAX);
 
 	memset(m, 0, mbuf_size);
 	/* start of buffer is after mbuf structure and priv data */
 	m->priv_size = priv_size;
 	m->buf_addr = (char *)m + mbuf_size;
 	m->buf_iova = rte_mempool_virt2iova(m) + mbuf_size;
-	m->buf_len = (uint16_t)buf_len;
+	m->buf_len = buf_len;
 
 	/* keep some headroom between start of buffer and data */
-	m->data_off = RTE_MIN(RTE_PKTMBUF_HEADROOM, (uint16_t)m->buf_len);
+	m->data_off = RTE_MIN((uint32_t)RTE_PKTMBUF_HEADROOM,
+		(uint32_t)m->buf_len);
 
 	/* init some constant fields */
 	m->pool = mp;
@@ -228,7 +229,7 @@ __rte_pktmbuf_init_extmem(struct rte_mem
 /* Helper to create a mbuf pool with given mempool ops name*/
 struct rte_mempool *
 rte_pktmbuf_pool_create_by_ops(const char *name, unsigned int n,
-	unsigned int cache_size, uint16_t priv_size, uint16_t data_room_size,
+	unsigned int cache_size, uint16_t priv_size, uint32_t data_room_size,
 	int socket_id, const char *ops_name)
 {
 	struct rte_mempool *mp;
@@ -280,7 +281,7 @@ rte_pktmbuf_pool_create_by_ops(const cha
 /* helper to create a mbuf pool */
 struct rte_mempool *
 rte_pktmbuf_pool_create(const char *name, unsigned int n,
-	unsigned int cache_size, uint16_t priv_size, uint16_t data_room_size,
+	unsigned cache_size, uint16_t priv_size, uint32_t data_room_size,
 	int socket_id)
 {
 	return rte_pktmbuf_pool_create_by_ops(name, n, cache_size, priv_size,
diff -pNaur dpdk-stable-21.11.2/lib/mbuf/rte_mbuf_core.h mcdma-dpdk-stable-21.11.2/lib/mbuf/rte_mbuf_core.h
--- dpdk-stable-21.11.2/lib/mbuf/rte_mbuf_core.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/lib/mbuf/rte_mbuf_core.h	2022-11-01 01:08:57.075538116 +0530
@@ -589,7 +589,7 @@ struct rte_mbuf {
 
 	/* next 8 bytes are initialised on RX descriptor rearm */
 	RTE_MARKER64 rearm_data;
-	uint16_t data_off;
+	uint32_t data_off;
 
 	/**
 	 * Reference counter. Its size should at least equal to the size
@@ -653,7 +653,7 @@ struct rte_mbuf {
 	};
 
 	uint32_t pkt_len;         /**< Total pkt len: sum of all segments. */
-	uint16_t data_len;        /**< Amount of data in segment buffer. */
+	uint32_t data_len;        /**< Amount of data in segment buffer. */
 	/** VLAN TCI (CPU order), valid if RTE_MBUF_F_RX_VLAN is set. */
 	uint16_t vlan_tci;
 
@@ -694,7 +694,7 @@ struct rte_mbuf {
 	/** Outer VLAN TCI (CPU order), valid if RTE_MBUF_F_RX_QINQ is set. */
 	uint16_t vlan_tci_outer;
 
-	uint16_t buf_len;         /**< Length of segment buffer. */
+	uint32_t buf_len;         /**< Length of segment buffer. */
 
 	struct rte_mempool *pool; /**< Pool from which mbuf was allocated. */
 
diff -pNaur dpdk-stable-21.11.2/lib/mbuf/rte_mbuf.h mcdma-dpdk-stable-21.11.2/lib/mbuf/rte_mbuf.h
--- dpdk-stable-21.11.2/lib/mbuf/rte_mbuf.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/lib/mbuf/rte_mbuf.h	2022-11-01 00:19:22.415626197 +0530
@@ -262,7 +262,7 @@ rte_mbuf_to_priv(struct rte_mbuf *m)
  * appended after the mempool structure (in private data).
  */
 struct rte_pktmbuf_pool_private {
-	uint16_t mbuf_data_room_size; /**< Size of data space in each mbuf. */
+	uint32_t mbuf_data_room_size; /**< Size of data space in each mbuf. */
 	uint16_t mbuf_priv_size;      /**< Size of private area in each mbuf. */
 	uint32_t flags; /**< reserved for future use. */
 };
@@ -477,7 +477,6 @@ rte_mbuf_ext_refcnt_update(struct rte_mb
 		rte_prefetch0(m);               \
 } while (0)
 
-
 /**
  * Sanity checks on an mbuf.
  *
@@ -674,7 +673,7 @@ void rte_pktmbuf_pool_init(struct rte_me
  */
 struct rte_mempool *
 rte_pktmbuf_pool_create(const char *name, unsigned n,
-	unsigned cache_size, uint16_t priv_size, uint16_t data_room_size,
+	unsigned cache_size, uint16_t priv_size, uint32_t data_room_size,
 	int socket_id);
 
 /**
@@ -716,7 +715,7 @@ rte_pktmbuf_pool_create(const char *name
  */
 struct rte_mempool *
 rte_pktmbuf_pool_create_by_ops(const char *name, unsigned int n,
-	unsigned int cache_size, uint16_t priv_size, uint16_t data_room_size,
+	unsigned int cache_size, uint16_t priv_size, uint32_t data_room_size,
 	int socket_id, const char *ops_name);
 
 /** A structure that describes the pinned external buffer segment. */
@@ -787,7 +786,7 @@ rte_pktmbuf_pool_create_extbuf(const cha
  * @return
  *   The data room size of mbufs stored in this mempool.
  */
-static inline uint16_t
+static inline uint32_t
 rte_pktmbuf_data_room_size(struct rte_mempool *mp)
 {
 	struct rte_pktmbuf_pool_private *mbp_priv;
@@ -827,8 +826,8 @@ rte_pktmbuf_priv_size(struct rte_mempool
  */
 static inline void rte_pktmbuf_reset_headroom(struct rte_mbuf *m)
 {
-	m->data_off = (uint16_t)RTE_MIN((uint16_t)RTE_PKTMBUF_HEADROOM,
-					(uint16_t)m->buf_len);
+	m->data_off = RTE_MIN((uint32_t)RTE_PKTMBUF_HEADROOM,
+					(uint32_t)m->buf_len);
 }
 
 /**
@@ -1248,7 +1247,7 @@ static inline void rte_pktmbuf_detach(st
 	m->priv_size = priv_size;
 	m->buf_addr = (char *)m + mbuf_size;
 	m->buf_iova = rte_mempool_virt2iova(m) + mbuf_size;
-	m->buf_len = (uint16_t)buf_len;
+	m->buf_len = buf_len;
 	rte_pktmbuf_reset_headroom(m);
 	m->data_len = 0;
 	m->ol_flags = 0;
@@ -1476,7 +1475,7 @@ static inline void rte_pktmbuf_refcnt_up
  * @return
  *   The length of the headroom.
  */
-static inline uint16_t rte_pktmbuf_headroom(const struct rte_mbuf *m)
+static inline uint32_t rte_pktmbuf_headroom(const struct rte_mbuf *m)
 {
 	__rte_mbuf_sanity_check(m, 0);
 	return m->data_off;
@@ -1490,10 +1489,10 @@ static inline uint16_t rte_pktmbuf_headr
  * @return
  *   The length of the tailroom.
  */
-static inline uint16_t rte_pktmbuf_tailroom(const struct rte_mbuf *m)
+static inline uint32_t rte_pktmbuf_tailroom(const struct rte_mbuf *m)
 {
 	__rte_mbuf_sanity_check(m, 0);
-	return (uint16_t)(m->buf_len - rte_pktmbuf_headroom(m) -
+	return (uint32_t)(m->buf_len - rte_pktmbuf_headroom(m) -
 			  m->data_len);
 }
 
diff -pNaur dpdk-stable-21.11.2/lib/vhost/rte_vhost.h mcdma-dpdk-stable-21.11.2/lib/vhost/rte_vhost.h
--- dpdk-stable-21.11.2/lib/vhost/rte_vhost.h	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/lib/vhost/rte_vhost.h	2022-11-01 00:19:22.415626197 +0530
@@ -636,7 +636,7 @@ int rte_vhost_driver_start(const char *p
  *  -EAGAIN: device not yet started
  *  -ENOTSUP: device does not support MTU feature
  */
-int rte_vhost_get_mtu(int vid, uint16_t *mtu);
+int rte_vhost_get_mtu(int vid, uint32_t *mtu);
 
 /**
  * Get the numa node from which the virtio net device's memory
diff -pNaur dpdk-stable-21.11.2/lib/vhost/vhost.c mcdma-dpdk-stable-21.11.2/lib/vhost/vhost.c
--- dpdk-stable-21.11.2/lib/vhost/vhost.c	2022-08-29 19:27:14.000000000 +0530
+++ mcdma-dpdk-stable-21.11.2/lib/vhost/vhost.c	2022-11-01 00:19:22.415626197 +0530
@@ -802,7 +802,7 @@ vhost_enable_linearbuf(int vid)
 }
 
 int
-rte_vhost_get_mtu(int vid, uint16_t *mtu)
+rte_vhost_get_mtu(int vid, uint32_t *mtu)
 {
 	struct virtio_net *dev = get_device(vid);
 
